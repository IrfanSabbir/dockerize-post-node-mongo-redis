server {
  listen 80;
   
  location /api {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header Host $proxy_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_pass http://node-app:3000;
    proxy_redirect off;
  }
}

docker-compose
service:
   nginx:
   image: nginx:stable-alpine
   volumes:
   	- ./nginx/default.conf:/etc/nginx/templates
    ports:
   	- "3000:80"



docker-compose.dev
service:
   nginx:
    ports:
   	- "3000:80" 


app.js

app.use(cors());
app.enable('trust proxy');

https://expressjs.com/en/guide/behind-proxies.html
https://serverfault.com/questions/540863/different-fields-for-proxy-set-header-in-nginx-configuration
https://nginx.org/en/docs/?_ga=2.128300811.623242740.1653978875-920742621.1653978875
http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect
http://nginx.org/en/docs/beginners_guide.html
https://hub.docker.com/_/nginx


command: docker logs container_name -f(for follow, real time updates the logs on terminal)
docker compose  -f docker-compose.yml -f docker-dompose.dev.yml up -d -V(Recreate anonymous data instead recreating from old container)
docker compose  -f docker-compose.yml -f docker-dompose.dev.yml up -d -scale node-app=2(service_name: num, is to scale multipe instance of a container)
